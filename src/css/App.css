/* GP = Good Practice */

*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit; /* GP - It will inherit body style */
}

/* Root style, reference for REM unit */
html {
  font-size: 62.5%; /* GP - 10px (what we want) * 16px (default root-font-size) / 100 */
}

/* Font style is inherit by default. Giving the body a certain style is the easiest way to style all fonts */
body {
  padding: 3rem; /* 30px / 10px (root-font-size) = 3 rem */
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777;
  box-sizing: border-box;
}

.header {
  position: relative;
  height: 95vh; /* 95% of viewport height */
  background-image: linear-gradient(
      to right bottom,
      rgba(126, 213, 111, 0.8),
      rgba(40, 180, 131, 0.8)
    ),
    url(../img/hero.jpg);
  background-size: cover; /* fits img to the box */
  background-position: top;
  clip-path: polygon(
    0 0,
    100% 0,
    100% 75vh,
    0 100%
  ); /* coordinates: top-left | top-right | bottom-right | bottom-left */
}

.header__logo-box {
  position: absolute;
  top: 4rem;
  left: 4rem;
}

.header__logo {
  height: 3.5rem;
}

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  margin-bottom: 6rem;
  /* backface-visibility: hidden; In case the animation gets shaky */
}

.heading-primary--main {
  display: block;
  font-size: 6rem;
  font-weight: 400;
  letter-spacing: 3.5rem;

  animation-name: moveInLeft; /* Specifies which animation is going to render */
  animation-duration: 1s;
  animation-timing-function: ease-out; /* Makes the animation slower at the end */

  /* animation-iteration-count: 3; number of times animation repeats */
  /* animation-delay: 3s; Time that takes animation to start */
}

.heading-primary--sub {
  display: block;
  font-size: 2rem;
  font-weight: 700;
  letter-spacing: 1.75px;

  animation-name: moveInRight;
  animation-duration: 1s;
  animation-timing-function: ease-out;
}

.header__text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(
    -50%,
    -50%
  ); /* translates the element over x and y axis according to the element's messures */
  text-align: center;
}

@keyframes moveInLeft {
  /* what happens when animation starts */
  0% {
    opacity: 0;
    transform: translateX(-10rem);
  }

  /* It can do any progression percentage */
  80% {
    transform: translateX(1rem);
  }

  /* what happens when animation ends */
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
  }
  80% {
    transform: translateX(-1rem);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

.btn:link,
.btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  display: inline-block;
  border-radius: 10rem;
  transition: all 0.2s; /* transitions always goes on the initial state */
  position: relative;
  font-size: 1.6rem;
}

.btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2); /* x-shadow, y-shadow, blur-size, color */
}

.btn:active {
  transform: translate(1px);
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2);
}

.btn--white {
  background-color: #fff;
  color: #777;
}

.btn::after {
  content: "";
  display: inline-block;
  height: 100%; /* pseudo-elements are treated like childs of the element */
  width: 100%;
  border-radius: 10rem;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s;
}

.btn--white::after {
  background-color: #fff;
}

.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6); /* Resize element */
  opacity: 0;
}

.btn--animated {
  animation: moveInBottom 0.5s ease-out 0.75s; /* name, duration, timing-function, delay */
  animation-fill-mode: backwards; /* applies animation 0% styles until animation starts */
}